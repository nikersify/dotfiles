language en_US.UTF-8

" Syntax highlighting and theme
syntax on
colorscheme dracula
set termguicolors " real colors

" Read file changes on vim focus, disable swap file to allow multiple vim's to
" edit the same file
set autoread
set noswapfile

" Keep cursor vertically centered
set scrolloff=999

" Update gitgutter in real time-ish
set updatetime=100

" Line numbers
set number
set relativenumber

" Ignore search case if only lower case characters, otherwise be case sensitive
set ignorecase
set smartcase

" Make `vnew` & `new` open windows to the right & bottom
set splitright
set splitbelow

" 4 char wide indents
set shiftwidth=4
set tabstop=4

" Indent broken up lines by 4 chars
set breakindent
set breakindentopt=shift:4

" Make all folds based on indents, and disable them on file open (`zi` to toggle)
set foldmethod=indent
set nofoldenable

" disables the ~/.viminfo file. viminfo/shada stores some state across vim startups, see `:h shada`/`:h viminfo` for more.
set shada=

" fzf.vim is broken with fish and for some reason uses this rather than &shell
" to determine the shell to run fzf in
let $SHELL = '/bin/bash'

if hostname() == "ryrz"
  " set the default clipboard to sync with system clipboard.
  set clipboard+=unnamedplus
endif

function! s:trailing_whitespace()
  hi ExtraWhitespace cterm=underline,bold gui=underline,bold ctermfg=blue
  match ExtraWhitespace /\s\+$/
endfunction

au BufWinEnter * :call s:trailing_whitespace()

" Prevent pear tree (bracket complete plugin) from hiding paired character
" when pressing <CR> (this was done in the plugin originally to keep dot
" repeatability working, but idgaf)
let g:pear_tree_repeatable_expand = 0

" blamer.nvim delay before showing the blame line. Toggle with
" `:BlamerToggle`, disabled by default.
let g:blamer_delay = 400

" bindings
let mapleader = ","

function! s:show_documentation()
	if (index(['vim','help'], &filetype) >= 0)
		execute 'h '.expand('<cword>')
	elseif (coc#rpc#ready())
		call CocActionAsync('doHover')
	else
		execute '!' . &keywordprg . " " . expand('<cword>')
	endif
endfunction

nmap <silent> <c-h> <c-w>h
nmap <silent> <c-j> <c-w>j
nmap <silent> <c-k> <c-w>k
nmap <silent> <c-l> <c-w>l
nmap <silent> <leader>b <Plug>(coc-references)
nmap <silent> <leader>c :CocDiagnostics<CR>
nmap <silent> <leader>d <Plug>(coc-definition)
nmap <silent> <leader>f :Files<CR>
nmap <silent> <leader>r <Plug>(coc-rename)
nmap <silent> <leader>t <Plug>(coc-type-definition)
nmap <silent> <leader>x :CocFix<CR>
nmap <silent> K :call <SID>show_documentation()<CR>
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)
nnoremap <silent> <esc> :noh<return><esc>
inoremap <silent><expr> <c-space> coc#refresh()
